{"version":3,"file":"kitsu.js","sources":["../src/util/query.js","../src/util/error.js","../src/util/deattribute.js","../src/util/filterIncludes.js","../src/util/linkRelationships.js","../src/util/deserialise.js","../src/util/serialise.js","../src/methods/create.js","../src/methods/fetch.js","../src/methods/remove.js","../src/methods/self.js","../src/methods/update.js","../src/index.js"],"sourcesContent":["export function query (params) {\r\n  try {\r\n    let query = ''\r\n\r\n    for (let param in params) {\r\n      if (typeof params[param] === 'object') {\r\n        Object.keys(params[param]).forEach(value => {\r\n          query += `&${param}[${value}]=${params[param][value]}`\r\n        })\r\n      } else if (typeof params[param] === 'string') {\r\n        query += `&${param}=${params[param]}`\r\n      }\r\n    }\r\n\r\n    return params ? query.slice(1) : ''\r\n  } catch (error) {\r\n    throw error\r\n  }\r\n}\r\n","export function error (E) {\r\n  if (E.response) {\r\n    const e = E.response.data\r\n    return e.errors ? e.errors : e\r\n  } else throw E\r\n}\r\n","export async function deattribute (data) {\r\n  try {\r\n    if (typeof data !== 'undefined') {\r\n      // Check if relationship has many includes\r\n      if (Array.isArray(data)) {\r\n        await data.forEach(async (el, index) => {\r\n          data[index] = await deattribute(el)\r\n        })\r\n      } else if (data.attributes && data.attributes.constructor === Object) {\r\n        for (let attribute in await data.attributes) {\r\n          data[attribute] = data.attributes[attribute]\r\n        }\r\n        delete data.attributes\r\n      }\r\n    }\r\n    return data\r\n  } catch (e) {\r\n    throw e\r\n  }\r\n}\r\n","/**\r\n * Filters includes for the specific relationship\r\n *\r\n * @param {Object} included The response included object\r\n * @param {Object} opts\r\n * @param {String} opts.id The relationship ID\r\n * @param {String} opts.type The relationship type\r\n * @returns {Array} The matched includes\r\n * @private\r\n */\r\nexport async function filterIncludes (included, { id, type }) {\r\n  try {\r\n    return included.filter(el => {\r\n      return el.id === id && el.type === type\r\n    })[0] || { id, type }\r\n  } catch (e) {\r\n    throw e\r\n  }\r\n}\r\n","import { deattribute } from './deattribute'\r\nimport { filterIncludes } from './filterIncludes'\r\n\r\n/**\r\n * Links relationships to included data\r\n *\r\n * @param {Object} data The response data object\r\n * @param {Object} included The response included object\r\n * @private\r\n */\r\nexport async function linkRelationships (data, included) {\r\n  try {\r\n    const { relationships } = data\r\n    for (let key in await relationships) {\r\n      // Relationship contains collection of resources\r\n      if (relationships[key].data && Array.isArray(relationships[key].data)) {\r\n        for (let { id, type } of await relationships[key].data) {\r\n          const deattributed = await deattribute(await filterIncludes(included, { id, type }))\r\n          if (typeof deattributed !== 'undefined') {\r\n            if (!data[key]) data[key] = []\r\n            data[key].push(deattributed)\r\n          }\r\n        }\r\n      // Relationship contains a single resource\r\n      } else if (relationships[key].data) {\r\n        const { id, type } = relationships[key].data\r\n        const deattributed = await deattribute(await filterIncludes(included, { id, type }))\r\n        if (typeof deattributed !== 'undefined' && !data[key]) data[key] = deattributed\r\n        delete data[key].relationships\r\n      }\r\n    }\r\n\r\n    delete data.relationships\r\n\r\n    return data\r\n  } catch (e) {\r\n    throw e\r\n  }\r\n}\r\n","import { deattribute } from './deattribute'\r\nimport { linkRelationships } from './linkRelationships'\r\n\r\n/**\r\n * Deserialises an object from a JSON-API structure\r\n *\r\n * @param {Object} obj The response\r\n * @returns {Object} The serialised response\r\n * @private\r\n */\r\nexport async function deserialise (obj) {\r\n  try {\r\n    // Collection of resources\r\n    // Note: constructor is currently faster than isArray()\r\n    // http://jsben.ch/QgYAV\r\n    if (obj.data && obj.data.constructor === Array) {\r\n      for (let value of await obj.data) {\r\n        if (obj.included) value = await linkRelationships(value, obj.included)\r\n        if (value.attributes) value = await deattribute(value)\r\n        obj.data[obj.data.indexOf(value)] = value\r\n      }\r\n    // Single resource with included relationships\r\n    } else if (obj.included) obj.data = await linkRelationships(obj.data, obj.included)\r\n\r\n    delete obj.included\r\n\r\n    // Move attributes to the parent object\r\n    if (obj.data.attributes) obj.data = await deattribute(obj.data)\r\n\r\n    return obj\r\n  } catch (e) {\r\n    throw e\r\n  }\r\n}\r\n","import camel from 'camelcase'\r\nimport plural from 'pluralize'\r\n\r\n/**\r\n * Serialises an object into a JSON-API structure\r\n *\r\n * @param {String} model Request model\r\n * @param {Object} obj The data\r\n * @param {String} method Request type\r\n * @returns {Object} The serialised data\r\n * @private\r\n */\r\nexport async function serialise (model, obj = {}, method = 'POST') {\r\n  try {\r\n    // Check if obj is not an object or empty\r\n    if (obj.constructor !== Object || Object.keys(obj).length === 0) {\r\n      throw new Error(`${method} requires a JSON object body`)\r\n    }\r\n    const type = plural(camel(model))\r\n    const data = { type }\r\n\r\n    // A POST request is the only request to not require an ID\r\n    if (method !== 'POST' && typeof obj.id === 'undefined') {\r\n      throw new Error(`${method} requires an ID for the ${type} type`)\r\n    }\r\n\r\n    // Add ID to data\r\n    if (method !== 'POST') {\r\n      data.id = obj.id\r\n    }\r\n\r\n    // Attributes and relationships\r\n    for (let prop in obj) {\r\n      // Check if its a relationship\r\n      if (\r\n        obj[prop] !== null &&\r\n        obj[prop].constructor === Object && (\r\n          typeof obj[prop].id === 'string' ||\r\n          typeof obj[prop].type === 'string'\r\n        )\r\n      ) {\r\n        if (typeof data.relationships === 'undefined') data.relationships = {}\r\n        // Guess relationship type if not provided\r\n        if (typeof obj[prop].type === 'undefined') obj[prop].type = plural(camel(prop))\r\n        data.relationships[prop] = { data: Object.assign(obj[prop]) }\r\n      } else if (prop !== 'id') { // Its an attribute\r\n        if (typeof data.attributes === 'undefined') data.attributes = {}\r\n        data.attributes[prop] = obj[prop]\r\n      }\r\n    }\r\n    return { data }\r\n  } catch (e) {\r\n    throw e\r\n  }\r\n}\r\n","import kebab from 'decamelize'\r\nimport plural from 'pluralize'\r\nimport { error, serialise } from '../util'\r\n\r\n/**\r\n * Create a new resource\r\n * Aliases: `post`\r\n * @memberof Kitsu\r\n * @param {String} model Model to create a resource under\r\n * @param {Object} body Data to send in the request\r\n * @param {Object} headers Additional headers to send with request\r\n * @returns {Object} JSON-parsed response\r\n *\r\n * @example\r\n * // Post a comment to a user's own profile\r\n * api.post('posts', {\r\n *   content: 'Hello World',\r\n *   targetUser: {\r\n *     id: '42603',\r\n *     type: 'users'\r\n *   },\r\n *   user: {\r\n *     id: '42603',\r\n *     type: 'users'\r\n *   }\r\n * })\r\n */\r\nexport default async function (model, body, headers = {}) {\r\n  try {\r\n    headers = Object.assign(this.headers, headers)\r\n    if (!headers.Authorization) throw new Error('Not logged in')\r\n    let { data } = await this.axios.post(plural(kebab(model)), {\r\n      data: (await serialise(model, body)).data,\r\n      headers\r\n    })\r\n    return data\r\n  } catch (E) {\r\n    return error(E)\r\n  }\r\n}\r\n","import kebab from 'decamelize'\r\nimport plural from 'pluralize'\r\nimport { deserialise, error, query } from '../util'\r\n\r\n/**\r\n * Fetch resources\r\n * Aliases: `get`, `find`, `findAll`\r\n * @memberof Kitsu\r\n * @param {String} model Model to fetch data from\r\n * @param {Object} params JSON-API request queries\r\n * @param {Object} params.page jsonapi.org/format/#fetching-pagination\r\n * @param {Number} params.page.limit Number of resources to return in request (Max `20` for Kitsu.io except on `libraryEntries` which has a max of `500`)\r\n * @param {Number} params.page.offset Number of resources to offset the dataset by\r\n * @param {Object} params.fields Return a sparse fieldset with only the included attributes/relationships jsonapi.org/format/#fetching-sparse-fieldsets\r\n * @param {Object} params.filter Filter dataset by attribute values jsonapi.org/format/#fetching-filtering\r\n * @param {String} params.sort Sort dataset by one or more comma separated attributes (prepend `-` for descending order) jsonapi.org/format/#fetching-sorting\r\n * @param {String} params.include Include relationship data jsonapi.org/format/#fetching-includes\r\n * @param {Object} headers Additional headers to send with request\r\n * @returns {Object} JSON-parsed response\r\n *\r\n * @example\r\n * // Get a specific user's name & birthday\r\n * api.get('users', {\r\n *   fields: {\r\n *     users: 'name,birthday'\r\n *   },\r\n *   filter: {\r\n *     name: 'wopian'\r\n *   }\r\n * })\r\n *\r\n * @example\r\n * // Get a collection of anime resources and their categories\r\n * api.get('anime', {\r\n *   include: 'categories'\r\n * })\r\n *\r\n * @example\r\n * // Get a single resource and its relationships by ID (method one)\r\n * api.get('anime', {\r\n *   include: 'categories',\r\n *   filter: { id: '2' }\r\n * })\r\n *\r\n * @example\r\n * // Get a single resource and its relationships by ID (method two)\r\n * api.get('anime/2', {\r\n *   include: 'categories'\r\n * })\r\n *\r\n * @example\r\n * // Get a resource's relationship data only\r\n * api.get('anime/2/categories')\r\n */\r\nexport default async function (model, params = {}, headers = {}) {\r\n  try {\r\n    let { data } = await this.axios.get(plural(kebab(model)), {\r\n      params,\r\n      paramsSerializer: a => query(a),\r\n      headers: Object.assign(this.headers, headers)\r\n    })\r\n    return deserialise(data)\r\n  } catch (E) {\r\n    return error(E)\r\n  }\r\n}\r\n","import kebab from 'decamelize'\r\nimport plural from 'pluralize'\r\nimport { error, serialise } from '../util'\r\n\r\n/**\r\n * Remove a resource\r\n * Aliases: `destroy`\r\n * @memberof Kitsu\r\n * @param {String} model Model to remove data from\r\n * @param {String|Number} id Resource ID to remove\r\n * @param {Object} headers Additional headers to send with request\r\n * @returns {Object} JSON-parsed response\r\n *\r\n * @example\r\n * // Delete a user's post\r\n * api.remove('posts', 123)\r\n */\r\nexport default async function (model, id, headers = {}) {\r\n  try {\r\n    headers = Object.assign(this.headers, headers)\r\n    if (!headers.Authorization) throw new Error('Not logged in')\r\n    let { data } = await this.axios.delete(`${plural(kebab(model))}/${id}`, {\r\n      data: (await serialise(model, { id }, 'DELETE')).data,\r\n      headers\r\n    })\r\n    return data\r\n  } catch (E) {\r\n    return error(E)\r\n  }\r\n}\r\n","import fetch from './fetch'\r\n\r\n/**\r\n * Fetch user data of the authenticated user\r\n * Note: Requires the JSON-API server to support `filter[self]=true`\r\n * Aliases: `whoAmI`\r\n * @memberof Kitsu\r\n * @param {Object} params JSON-API request queries\r\n * @param {Object} params.fields Return a sparse fieldset with only the included attributes/relationships jsonapi.org/format/#fetching-sparse-fieldsets\r\n * @param {String} params.include Include relationship data jsonapi.org/format/#fetching-includes\r\n * @param {Object} headers Additional headers to send with request\r\n * @returns {Object} JSON-parsed response\r\n *\r\n * @example\r\n * // Receive all attributes\r\n * api.self()\r\n *\r\n * @example\r\n * // Receive a sparse fieldset\r\n * api.self({\r\n *   fields: 'name,birthday'\r\n * })\r\n */\r\nexport default async function (params = {}, headers = {}) {\r\n  try {\r\n    const { data } = await fetch.bind(this)('users', Object.assign({ filter: { self: true } }, params), headers)\r\n    return data[0]\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n","import kebab from 'decamelize'\r\nimport plural from 'pluralize'\r\nimport { error, serialise } from '../util'\r\n\r\n/**\r\n * Update a resource\r\n * Aliases: `patch`\r\n * @memberof Kitsu\r\n * @param {String} model Model to update data in\r\n * @param {Object} body Data to send in the request\r\n * @param {Object} headers Additional headers to send with request\r\n * @returns {Object} JSON-parsed response\r\n *\r\n * @example\r\n * // Update a user's post (Note: For Kitsu.io, posts cannot be edited 30 minutes after creation)\r\n * api.update('posts', {\r\n *   id: '12345678',\r\n *   content: 'Goodbye World'\r\n * })\r\n */\r\nexport default async function (model, body, headers = {}) {\r\n  try {\r\n    headers = Object.assign(this.headers, headers)\r\n    if (!headers.Authorization) throw new Error('Not logged in')\r\n    if (typeof body.id === 'undefined') throw new Error('Updating a resource requires an ID')\r\n    let { data } = await this.axios.patch(`${plural(kebab(model))}/${body.id}`, {\r\n      data: (await serialise(model, body, 'PATCH')).data,\r\n      headers\r\n    })\r\n    return data\r\n  } catch (E) {\r\n    return error(E)\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport create from './methods/create'\r\nimport fetch from './methods/fetch'\r\nimport remove from './methods/remove'\r\nimport self from './methods/self'\r\nimport update from './methods/update'\r\n\r\nconst kitsu = 'https://kitsu.io/api'\r\n\r\n/**\r\n * A simple, lightweight & framework agnostic JSON-API client JSON API\r\n * @param {Object} options Options\r\n * @param {String} options.baseURL Override the HTTP API endpoint (default `https://kitsu.io/api)\r\n * @param {String} options.version Override the HTTP API version (default `edge` if kitsu.io, else defaults to an empty `String`)\r\n * @param {Number} options.timeout Override the request timeout in milliseconds (default `30000`)\r\n * @param {Object} options.headers Additional headers to send with requests\r\n *\r\n * @example\r\n * // Basic\r\n * const api = new Kitsu()\r\n *\r\n * @example\r\n * // Set a `user-agent` and pre-existing `authorization` token\r\n * const api = new Kitsu({\r\n *   headers: {\r\n *     'user-agent': 'MyApp/1.0.0 (github.com/username/repo)',\r\n *     authorization: 'Bearer 1234567890'\r\n *   }\r\n * })\r\n *\r\n * @example\r\n * // Use a different JSON-API backend\r\n * const api = new Kitsu({\r\n *   baseURL: 'https://api.example.org'\r\n * })\r\n */\r\nexport default class Kitsu {\r\n  constructor (options = {}) {\r\n    this.baseURL = options.baseURL || kitsu\r\n    this.headers = Object.assign(options.headers ? options.headers : {}, {\r\n      'accept': 'application/vnd.api+json',\r\n      'content-type': 'application/vnd.api+json'\r\n    })\r\n    this.axios = axios.create({\r\n      baseURL: this.baseURL + '/' + (options.version || (this.baseURL === kitsu ? 'edge' : '')),\r\n      timeout: options.timeout || 30000,\r\n      headers: this.headers\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get the current headers or add additional headers\r\n   * @returns {Object} All the current headers\r\n   *\r\n   * @example\r\n   * // Receive all the headers\r\n   * console.log(api.headers)\r\n   *\r\n   * @example\r\n   * // Receive a specific header\r\n   * console.log(api.headers['user-agent'])\r\n   *\r\n   * @example\r\n   * // Add or update a header\r\n   * api.headers['authorization'] = 'Bearer 1234567890'\r\n   */\r\n  headers () {\r\n    return this.headers\r\n  }\r\n\r\n  /**\r\n   * Check if the client is authenticated (oAuth2)\r\n   * @returns {Boolean}\r\n   *\r\n   * @example\r\n   * if (api.isAuth) console.log('Authenticated')\r\n   * else console.log('Not authenticated')\r\n   */\r\n  get isAuth () {\r\n    return Boolean(this.headers.Authorization)\r\n  }\r\n\r\n  fetch = fetch.bind(this)\r\n  update = update.bind(this)\r\n  create = create.bind(this)\r\n  remove = remove.bind(this)\r\n  self = self.bind(this)\r\n\r\n  // Aliases (kitsu <= 2.0.4 & devour)\r\n  get = this.fetch\r\n  find = this.fetch\r\n  findAll = this.fetch\r\n  patch = this.update\r\n  post = this.create\r\n  destroy = this.remove\r\n  whoAmI = this.self\r\n}\r\n"],"names":["query","params","keys","forEach","param","slice","E","response","e","data","errors","Array","isArray","deattribute","attributes","constructor","Object","id","type","included","filter","el","relationships","filterIncludes","push","obj","linkRelationships","value","indexOf","method","length","Error","plural","camel","assign","prop","headers","Authorization","axios","kebab","serialise","post","error","get","deserialise","delete","fetch","bind","self","body","patch","Kitsu","options","update","create","remove","find","findAll","destroy","whoAmI","baseURL","version","timeout"],"mappings":"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"}